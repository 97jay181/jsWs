package com.ohgiraffers.section01.generic;

/* 설명. 제네릭의 다이아몬드 연산자 <>
 *  제네릭 설정은 클래스 선언부의 마지막에 다이아몬드 연산자 '<', '>'를 이용해 작성한다.
 *  다이아몬드 연산자 내부에 작성하는 영문자는 관례상 대문자로 작성한다   */
public class GenericTest<T> {

    /* 설명. 다이아몬드 연산자 내부에 작성한 T는 '타입변수' 라고 부른다.
     *  타입변수를 자료형 대신 사용할 것인데, 가상으로 존재하는 타입이며 일반화된 타입의 대명사.
     *  T가 아닌 다른 영문자를 사용해도 무방하다. (에러가 발생하진 않는다.)
     *  또한 여러개의 타입변수를 작성할 떄는 콤마(,)를 이용해서 여러개를 기술할 수 있다.
     *  사용하는 쪽에서는 작성한 제네릭 클래스를 사용할 때
     *  실제 사용할 타입을 타입변수 자리에 맞춰 넣어주면, 컴파일 시점에 타입이 결정되게 된다.
     *  ========================================================================================
     *  (자주 쓰는 필드 변수)
     *  T : Type
     *  E : Element
     *  K : Key
     *  V : Value
     *  -------------------------------------------------------------------------------------------
     *  (자주 쓰지는 않지만, 종종 보이는 필드 변수)
     *  N : Number
     *  S, U, V : Second, Third, Fourth type
     *  E : Enum
     *  R : Return
     * */

    private T value;

    public T getValue() {
        return value;
    }

    public void setValue(T value) {
        this.value = value;
    }

}
